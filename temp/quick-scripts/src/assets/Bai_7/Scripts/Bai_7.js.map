{"version":3,"sources":["assets/Bai_7/Scripts/Bai_7.js"],"names":["LazyMan","name","console","log","promise","Promise","resolve","eat","then","setTimeout","sleep","cc","Class","Component","properties","onLoad","lazyMan","start"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;IAEMA;EACF,iBAAYC,IAAZ,EAAkB;IACd,KAAKA,IAAL,GAAYA,IAAZ;IACAC,OAAO,CAACC,GAAR,iBAA0B,KAAKF,IAA/B;IACA,KAAKG,OAAL,GAAeC,OAAO,CAACC,OAAR,EAAf;IACA,OAAO,IAAP;EACD;;;;SAEHC,MAAA,aAAIA,IAAJ,EAAQ;IACJ,KAAKH,OAAL,GAAe,KAAKA,OAAL,CAAaI,IAAb,CAAkB,YAAI;MACjC,OAAO,IAAIH,OAAJ,CAAY,UAAAC,OAAO;QAAA,OAAIG,UAAU,CAAC,YAAI;UACzCP,OAAO,CAACC,GAAR,kBAA2BI,IAA3B;UACAD,OAAO;QACV,CAHuC,EAGtC,IAHsC,CAAd;MAAA,CAAnB,CAAP;IAMH,CAPc,CAAf;IAQA,OAAO,IAAP;EACH;;SAEDI,QAAA,eAAMA,MAAN,EAAa;IACT,KAAKN,OAAL,GAAe,KAAKA,OAAL,CAAaI,IAAb,CAAkB,YAAM;MACrCN,OAAO,CAACC,GAAR,CAAY,kBAAZ;MACA,OAAO,IAAIE,OAAJ,CAAY,UAAAC,OAAO,EAAI;QAC5BG,UAAU,CAAC,YAAM;UACfP,OAAO,CAACC,GAAR,YAAqBO,MAArB;UACAJ,OAAO;QACR,CAHS,EAGPI,MAHO,CAAV;MAID,CALM,CAAP;IAMD,CARc,CAAf;IASA,OAAO,IAAP;EACD;;;;;AAGPC,EAAE,CAACC,KAAH,CAAS;EACL,WAASD,EAAE,CAACE,SADP;EAGLC,UAAU,EAAE,EAHP;EAOL;EAEAC,MATK,oBASI;IACL,IAAMC,OAAO,GAAG,IAAIhB,OAAJ,CAAY,MAAZ,CAAhB;IACAgB,OAAO,CAACT,GAAR,CAAY,OAAZ,EAAqBG,KAArB,CAA2B,IAA3B,EAAiCH,GAAjC,CAAqC,WAArC,EAAkDG,KAAlD,CAAwD,IAAxD,EAA8DH,GAA9D,CAAkE,MAAlE;EACH,CAZI;EAcLU,KAdK,mBAcG,CAEP,CAhBI,CAkBL;;AAlBK,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nclass LazyMan {\n    constructor(name) {\n        this.name = name;\n        console.log(`My name is ${this.name}`);\n        this.promise = Promise.resolve();\n        return this\n      }\n\n    eat(eat){\n        this.promise = this.promise.then(()=>{\n            return new Promise(resolve => setTimeout(()=>{\n                console.log(`I am eating ${eat}`)\n                resolve()\n            },3000))\n            \n            \n        })\n        return this;\n    }\n\n    sleep(sleep) {\n        this.promise = this.promise.then(() => {\n          console.log('I am sleeping...');\n          return new Promise(resolve => {\n            setTimeout(() => {\n              console.log(`After ${sleep} seconds`);\n              resolve();\n            }, sleep);\n          });\n        });\n        return this;\n      }      \n}\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        const lazyMan = new LazyMan('jack');\n        lazyMan.eat('apple').sleep(5000).eat('hamburger').sleep(3000).eat('pear');\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {},\n});\n"]}