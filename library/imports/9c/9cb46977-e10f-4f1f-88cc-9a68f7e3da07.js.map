{"version":3,"sources":["assets/Bai_9/Scripts/Bai_9.js"],"names":["cc","Class","Component","properties","onLoad","run","getServerTime","Date","getTime","circuitBreaker","fn","timeThreshold","startTime","now","currentTime","getTimeLimited","setTimeout","console","log","start"],"mappings":";;;;;;+CACA;;;;;;AADA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;EACL,WAASD,EAAE,CAACE,SADP;EAGLC,UAAU,EAAE,CACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAfQ,CAHP;EAqBL;EAEAC,MAvBK,oBAuBI;IACL,KAAKC,GAAL;EACH,CAzBI;EA2BLC,aA3BK,2BA2BW;IACZ,OAAO,IAAIC,IAAJ,GAAWC,OAAX,EAAP;EACH,CA7BI;EA8BCC,cA9BD,0BA8BgBC,EA9BhB,EA8BoBC,aA9BpB,EA8BmC;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAC9BC,SAD8B,GAClBL,IAAI,CAACM,GAAL,EADkB;cAAA,iCAE7B,YAAmB;gBACtB,IAAMC,WAAW,GAAGP,IAAI,CAACM,GAAL,EAApB;;gBACA,IAAIC,WAAW,GAAGF,SAAd,GAA0BD,aAA9B,EAA6C;kBACzC,OAAO,gBAAP;gBACH;;gBACD,OAAOD,EAAE,MAAF,mBAAP;cACH,CARmC;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EASvC,CAvCI;EAyCCL,GAzCD,iBAyCO;IAAA;;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACmB,KAAI,CAACI,cAAL,CAAoB,KAAI,CAACH,aAAzB,EAAwC,IAAxC,CADnB;;YAAA;cACJS,cADI;cAERC,UAAU,CAAC,YAAM;gBAAEC,OAAO,CAACC,GAAR,CAAYH,cAAc,EAA1B;cAAgC,CAAzC,EAA2C,GAA3C,CAAV;cACAC,UAAU,CAAC,YAAM;gBAAEC,OAAO,CAACC,GAAR,CAAYH,cAAc,EAA1B;cAAgC,CAAzC,EAA2C,IAA3C,CAAV;;YAHQ;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAIX,CA7CI;EA8CLI,KA9CK,mBA8CG,CAEP,CAhDI,CAkDL;;AAlDK,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.run()\n    },\n\n    getServerTime() {\n        return new Date().getTime()\n    },\n    async circuitBreaker(fn, timeThreshold) {\n        const startTime = Date.now();\n        return function (...args) {\n            const currentTime = Date.now();\n            if (currentTime - startTime > timeThreshold) {\n                return \"service closed\";\n            }\n            return fn(...args);\n        };\n    },\n\n    async run() {\n        let getTimeLimited = await this.circuitBreaker(this.getServerTime, 2000);\n        setTimeout(() => { console.log(getTimeLimited()); }, 300)\n        setTimeout(() => { console.log(getTimeLimited()); }, 2100)\n    },\n    start() {\n\n    },\n\n    // update (dt) {},\n});\n"]}