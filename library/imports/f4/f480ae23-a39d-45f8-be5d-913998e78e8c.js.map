{"version":3,"sources":["assets/Bai_2/Scripts/Bai_2.js"],"names":["cc","Class","Component","properties","onLoad","fetchWithAutoRetry","simulateAPICall","then","result","console","log","error","start","fetcher","maximumRetryCount","retry","Promise","resolve","reject","a","Error"],"mappings":";;;;;;+CACA;;;;;;AADA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;EACL,WAASD,EAAE,CAACE,SADP;EAGLC,UAAU,EAAE,EAHP;EAOL;EAEAC,MATK,oBASI;IACL,KAAKC,kBAAL,CAAwB,KAAKC,eAA7B,EACKC,IADL,CACU,UAAAC,MAAM,EAAI;MACZC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;IACH,CAHL,WAGa,UAAAG,KAAK,EAAI;MACdF,OAAO,CAACE,KAAR,CAAc,qBAAd;IACH,CALL;EAMH,CAhBI;EAkBLC,KAlBK,mBAkBG,CAEP,CApBI;EAsBL;EAEA;EACMP,kBAzBD,8BAyBoBQ,OAzBpB,EAyB6BC,iBAzB7B,EAyBoD;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IAAvBA,iBAAuB;gBAAvBA,iBAAuB,GAAH,CAAG;cAAA;;cACjDC,KADiD,GACzC,CADyC;;YAAA;cAAA,MAE9CA,KAAK,GAAGD,iBAFsC;gBAAA;gBAAA;cAAA;;cAAA;cAAA;cAAA,OAIxBD,OAAO,EAJiB;;YAAA;cAIvCL,MAJuC;cAK7CC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;cAL6C,iCAMtCA,MANsC;;YAAA;cAAA;cAAA;cAQ7CO,KAAK;;cARwC,MASzCA,KAAK,KAAKD,iBAT+B;gBAAA;gBAAA;cAAA;;cAAA;;YAAA;cAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAcxD,CAvCI;EAwCL;EACAR,eAzCK,6BAyCa;IACd,OAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;MACpC;MACA,IAAIC,CAAC,GAAG,KAAR;MACAV,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBS,CAAhB;;MACA,IAAIA,CAAC,IAAI,KAAT,EAAgB;QACZD,MAAM,CAAC,IAAIE,KAAJ,CAAU,iBAAV,CAAD,CAAN;MACH,CAFD,MAEO;QACHH,OAAO,CAAC,oBAAD,CAAP;MACH;IACJ,CATM,CAAP;EAUH;AApDI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.fetchWithAutoRetry(this.simulateAPICall)\n            .then(result => {\n                console.log('Success:', result);\n            }).catch(error => {\n                console.error('All retries failed:')\n            });\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {},\n\n    // Iterative approach\n    async fetchWithAutoRetry(fetcher, maximumRetryCount = 5) {\n        let retry = 0;\n        while (retry < maximumRetryCount) {\n            try {\n                const result = await fetcher();\n                console.log('result', result)\n                return result;\n            } catch (error) {\n                retry++;\n                if (retry === maximumRetryCount) {\n                    throw error; \n                }\n            }\n        }\n    },\n    // Usage example\n    simulateAPICall() {\n        return new Promise((resolve, reject) => {\n            // Simulate a 50% chance of failure\n            let a = false\n            console.log('a',a)\n            if (a == false) {\n                reject(new Error('API call failed'));\n            } else {\n                resolve('API call succeeded');\n            }\n        });\n    },\n\n\n});\n"]}